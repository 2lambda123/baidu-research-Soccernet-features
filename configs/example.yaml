MODEL: #MODEL field
    framework: "Recognizer2D" #Mandatory, indicate the type of network, associate to the 'paddlevideo/modeling/framework/' .
    backbone: #Mandatory, indicate the type of backbone, associate to the 'paddlevideo/modeling/backbones/' .
        name: "ResNet" #Mandatory, The name of backbone.
        pretrained: "/work/data/pretrained_dygraph/ResNet50/best_model/ppcls.pdparams" #Optional, pretrained model path.
        depth: 50 #Optional, the depth of backbone architecture.
    head:
        name: "TSNHead" #Mandatory, indicate the type of head, associate to the 'paddlevideo/modeling/heads'
        num_classes: 400 #Optional, the number of classes to be classified.
        in_channels: 2048 #input channel of the extracted feature.
        drop_ratio: 0.4 #the ratio of dropout
        std: 0.01 #std value in params initialization

DATASET: #DATASET field
    batch_size: 4 #Mandatory, bacth size
    num_workers: 2 #Mandatory, XXX the number of subprocess on each GPU.
    train: 
        format: "VideoDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "" #Mandatory, train data root path
        file_path: "data/ucf101/ucf101_train_split_1_videos.txt" #Mandatory, train data index file path
    valid:
        format: "VideoDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "" #Mandatory, valid data root path
        file_path: "./data/ucf101/ucf101_val_split_1_videos.txt" #Mandatory, valid data index file path

PIPELINE: #PIPELINE field
    train: #Mandotary, indicate the pipeline to deal with the training data, associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
        sample:
            name: "Sampler"
            num_seg: 8
            seg_len: 1
            valid_mode: False
        transform: #Mandotary, image transfrom operator
            - Scale:
                short_size: 256
            - RandomCrop:
                target_size: 224
            - RandomFlip:
            - Image2Array:
            - Normalization:
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]

    valid: #Mandatory, indicate the pipeline to deal with the validing data. associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
        sample:
            name: "Sampler"
            valid_mode: True
            num_seg: 8
            seg_len: 1 
        transform:
            - Scale:
                short_size: 256
            - CenterCrop:
                target_size: 224
            - Image2Array:
            - Normalization:
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]


OPTIMIZER: #OPTIMIZER field
    name: 'Momentum' #Mandatory, the type of optimizer, associate to the 'paddlevideo/solver/'
    momentum: 0.9 
    learning_rate: #Mandatory, the type of learning rate scheduler, associate to the 'paddlevideo/solver/'
        name: 'PiecewiseDecay'
        boundaries: [30, 60]
        values: [0.00025, 0.000025, 0.0000025]
    weight_decay:
        name: 'L2'
        value: 1e-4

EVALUATION:
    interval: 5
    function: "topk"
    topk: (1,5)

log_interval: 20 #Optional, the interal of logger
epochs: 2 #Mandatory, total epoch
log_level: "DEBUG" #Optional, the logger level.
resume_from: "./pretrained/XXX" #checkpoint path.
