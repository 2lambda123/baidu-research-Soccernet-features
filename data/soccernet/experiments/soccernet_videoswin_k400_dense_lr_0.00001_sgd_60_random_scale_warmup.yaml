MODEL: #MODEL field
    framework: "RecognizerTransformerDenseAnchors" #Mandatory, indicate the type of network, associate to the 'paddlevideo/modeling/framework/' .
    backbone: #Mandatory, indicate the type of backbone, associate to the 'paddlevideo/modeling/backbones/' .
        name: "SwinTransformer3D" #Mandatory, The name of backbone.
        pretrained: "" # swin_base_patch4_window7_224 "pretrained_weights/ViT_base_patch16_224_pretrained.pdparams" #Optional, pretrained model path.
        patch_size: [2, 4, 4]
        embed_dim: 128
        depths: [2, 2, 18, 2]
        num_heads: [4, 8, 16, 32]
        window_size: [8, 7, 7]
        mlp_ratio: 4.
        qkv_bias: True
        qk_scale: None
        drop_rate: 0.0
        attn_drop_rate: 0.0
        drop_path_rate: 0.2
        patch_norm: True
    head:
        name: "I3DAnchorHead" #Mandatory, indicate the type of head, associate to the 'paddlevideo/modeling/heads'
        num_classes: 18  #Optional, the number of classes to be classified.
        in_channels: 1024 #input channel of the extracted feature.
        spatial_type: 'avg'
        drop_ratio: 0.5 #the ratio of dropout
        std: 0.01 #std value in params initialization
        event_time_loss_weight: 5.0
    runtime_cfg: # configuration used when the model is train or test.
        test: # test config
            num_seg: 16
            avg_type: 'prob' # 'score' or 'prob'

DATASET: #DATASET field
    batch_size: 5 #Mandatory, bacth size
    num_workers: 5 #Mandatory, XXX the number of subprocess on each GPU.
    test_batch_size: 1
    train:
        format: "VideoDenseAnchorsDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "" #Mandatory, train data root path
        file_path: train.dense.list #"/mnt/storage/gait-0/xin/dataset/soccernet_456x256/train.list" #Mandatory, train data index file path
        # file_path: train1.list #"/mnt/storage/gait-0/xin/dataset/soccernet_456x256/train.list" #Mandatory, train data index file path

    valid:
        format: "VideoDenseAnchorsDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "" #Mandatory, train data root path
        file_path: val.dense.list #"/mnt/storage/gait-0/xin/dataset/soccernet_456x256/val.list" #Mandatory, valid data index file path
        # file_path: train1.list
    test:
        format: "VideoDenseAnchorsDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "" #Mandatory, train data root path
        file_path: test.dense.list # "/mnt/storage/gait-0/xin/dataset/soccernet_456x256/test.list" #Mandatory, valid data index file path

PIPELINE: #PIPELINE field TODO.....
    train: #Mandotary, indicate the pipeline to deal with the training data, associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
            backend: 'decord'
            mode: 'train'
        sample:
            name: "EventSampler"
            num_seg: 16
            # frame_interval: 2
            seg_len: 1
            valid_mode: False
            use_pil: False
            sample_length_secs: 5.0
        transform: #Mandotary, image transform operator.
            - RandomResizedCrop:
                  backend: "cv2"
                  area_range: [0.875, 1.0]
            # - Scale:
            #       short_size: 224
            #       fixed_ratio: False
            #       keep_ratio: False
            #       backend: "cv2"
            #       do_round: True
            - RandomFlip:
            - CenterCrop:
                  target_size: 224
                  do_round: False
                  backend: "cv2"
            - Normalization:
                  mean: [123.675, 116.28, 103.53]
                  std: [58.395, 57.12, 57.375]
                  tensor_shape: [3, 1, 1, 1]
                  inplace: True
            - Image2Array:
                  data_format: "cthw"
    valid: #Mandatory, indicate the pipeline to deal with the validing data. associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
            backend: 'decord'
            mode: 'valid'
        sample:
            name: "EventSampler"
            num_seg: 16
            # frame_interval: 2
            seg_len: 1
            valid_mode: True
            use_pil: False
            sample_length_secs: 5.0
        transform: #Mandotary, image transform operator.
            - Scale:
                short_size: 256
                fixed_ratio: False
                keep_ratio: True
                backend: 'cv2'
                do_round: True
            - CenterCrop:
                target_size: 224
                do_round: False
                backend: 'cv2'
            - Normalization:
                mean: [123.675, 116.28, 103.53]
                std: [58.395, 57.12, 57.375]
                tensor_shape: [3, 1, 1, 1]
                inplace: True
            - Image2Array:
                data_format: 'cthw'
    test:
        decode:
            name: "VideoDecoder"
            backend: 'decord'
            mode: 'valid'
        sample:
            name: "EventSampler"
            num_seg: 16
            # frame_interval: 2
            seg_len: 1
            valid_mode: True
            use_pil: False
            sample_length_secs: 5.0
        transform: #Mandotary, image transform operator.
            - Scale:
                short_size: 224
                fixed_ratio: False
                keep_ratio: True
                backend: 'cv2'
                do_round: True
            - UniformCrop:
                target_size: 224
                backend: 'cv2'
            - Normalization:
                mean: [123.675, 116.28, 103.53]
                std: [58.395, 57.12, 57.375]
                tensor_shape: [3, 1, 1, 1]
                inplace: True
            - Image2Array:
                data_format: 'cthw'

# OPTIMIZER: #OPTIMIZER field
#     name: 'AdamW' #Mandatory, the type of optimizer, associate to the 'paddlevideo/solver/'
#     beta1: 0.9
#     beta2: 0.999
#     no_weight_decay_name: 'norm relative_position_bias_table'
#     learning_rate: #Mandatory, the type of learning rate scheduler, associate to the 'paddlevideo/solver/'
#         name: 'CustomWarmupCosineStepDecay'
#         iter_step: True
#         warmup_iters: 2.5
#         warmup_ratio: 0.1
#         min_lr: 0
#         base_lr: 1e-3
#         max_epoch: 30
#     weight_decay: 0.05

# tsn optimizer
OPTIMIZER: #OPTIMIZER field
    name: 'Momentum' #Mandatory, the type of optimizer, associate to the 'paddlevideo/solver/'
    momentum: 0.9
    learning_rate:
        iter_step: True
        name: 'CustomWarmupCosineDecay'
        max_epoch: 30
        warmup_epochs: 2
        warmup_start_lr: 1e-6
        cosine_base_lr: 1e-5
    weight_decay:
        name: 'L2'
        value: 0.00007
    use_nesterov: True
    grad_clip:
        name: 'ClipGradByGlobalNorm'
        value: 40.0

METRIC:
    name: 'CenterCropMetric'

GRADIENT_ACCUMULATION:
    global_batch_size: 40 # Specify the sum of batches to be calculated by all GPUs

INFERENCE:
    name: 'VideoSwin_Inference_helper'
    num_seg: 16
    seg_len: 2
    short_size: 256
    target_size: 224

model_name: "VideoSwinAnchors_SGD_lr_0.00001_epochs_60_random_scale"
log_interval: 5 #Optional, the interal of logger, default:10
save_interval: 1
epochs: 30 #Mandatory, total epoch
log_level: "INFO" #Optional, the logger level. default: "INFO"
